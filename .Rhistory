mat[mat > 0.05] <- 0.05
p <- pheatmap(mat,
cluster_rows = TRUE,
cluster_cols = FALSE,
color = colorRampPalette(c("red", "white"))(100),
breaks = seq(0, 0.05, length.out = 90),
border_color = "black",
fontsize_row = 10,
fontsize_col = 10,
main = paste("GO Term Enrichment -", title_suffix),
silent = TRUE)
# Save to file
png_filename <- paste0("D:/Toolbox/GO_Term_Enrichment_", filename_suffix, ".png")
png(png_filename, width = 1500, height = 500)
grid.draw(p$gtable)
dev.off()
cat(paste("[✓] Saved heatmap:", png_filename, "\n"))
}
# Split data
bp_data <- filter(data, Namespace == "BP")
mf_data <- filter(data, Namespace == "MF")
cc_data <- filter(data, Namespace == "CC")
# Generate and save separate heatmaps
generate_and_save_heatmap(mf_data, "Molecular Function", "MF")
generate_and_save_heatmap(bp_data, "Biological Process", "BP")
generate_and_save_heatmap(cc_data, "Cellular Component", "CC")
# Load required libraries
library(pheatmap)
library(reshape2)
library(dplyr)
library(gridExtra)
library(grid)
library(ggplot2)
# Load data
data <- read.csv("D:/Toolbox/Pfam_GO_3000_annotated.csv", stringsAsFactors = FALSE)
# Replace NA in q-values with 1
data$FDR..q.value.[is.na(data$FDR..q.value.)] <- 1
# Function to generate and save pheatmap
generate_and_save_heatmap <- function(sub_data, title_suffix, filename_suffix) {
if (nrow(sub_data) == 0) {
cat(paste("[!] No data found for", title_suffix, "\n"))
return()
}
df_wide <- dcast(sub_data, GO.Term.Description ~ sector, value.var = "FDR..q.value.")
df_wide[is.na(df_wide)] <- 1
mat <- as.matrix(df_wide[,-1])
rownames(mat) <- df_wide$GO.Term.Description
mat[mat > 0.05] <- 0.05
p <- pheatmap(mat,
cluster_rows = TRUE,
cluster_cols = FALSE,
color = colorRampPalette(c("red", "white"))(100),
breaks = seq(0, 1, length.out = 90),
border_color = "black",
fontsize_row = 10,
fontsize_col = 10,
main = paste("GO Term Enrichment -", title_suffix),
silent = TRUE)
# Save to file
png_filename <- paste0("D:/Toolbox/GO_Term_Enrichment_", filename_suffix, ".png")
png(png_filename, width = 1500, height = 500)
grid.draw(p$gtable)
dev.off()
cat(paste("[✓] Saved heatmap:", png_filename, "\n"))
}
# Split data
bp_data <- filter(data, Namespace == "BP")
mf_data <- filter(data, Namespace == "MF")
cc_data <- filter(data, Namespace == "CC")
# Generate and save separate heatmaps
generate_and_save_heatmap(mf_data, "Molecular Function", "MF")
generate_and_save_heatmap(bp_data, "Biological Process", "BP")
generate_and_save_heatmap(cc_data, "Cellular Component", "CC")
# Load required libraries
library(pheatmap)
library(reshape2)
library(dplyr)
library(gridExtra)
library(grid)
library(ggplot2)
# Load data
data <- read.csv("D:/Toolbox/Pfam_GO_3000_annotated.csv", stringsAsFactors = FALSE)
# Replace NA in q-values with 1
data$FDR..q.value.[is.na(data$FDR..q.value.)] <- 1
# Function to generate and save pheatmap
generate_and_save_heatmap <- function(sub_data, title_suffix, filename_suffix) {
if (nrow(sub_data) == 0) {
cat(paste("[!] No data found for", title_suffix, "\n"))
return()
}
df_wide <- dcast(sub_data, GO.Term.Description ~ sector, value.var = "FDR..q.value.")
df_wide[is.na(df_wide)] <- 1
mat <- as.matrix(df_wide[,-1])
rownames(mat) <- df_wide$GO.Term.Description
mat[mat > 0.05] <- 0.05
p <- pheatmap(mat,
cluster_rows = TRUE,
cluster_cols = FALSE,
color = colorRampPalette(c("red", "white"))(50),
breaks = seq(0, 1, length.out = 50),
border_color = "black",
fontsize_row = 10,
fontsize_col = 10,
main = paste("GO Term Enrichment -", title_suffix),
silent = TRUE)
# Save to file
png_filename <- paste0("D:/Toolbox/GO_Term_Enrichment_", filename_suffix, ".png")
png(png_filename, width = 1500, height = 500)
grid.draw(p$gtable)
dev.off()
cat(paste("[✓] Saved heatmap:", png_filename, "\n"))
}
# Split data
bp_data <- filter(data, Namespace == "BP")
mf_data <- filter(data, Namespace == "MF")
cc_data <- filter(data, Namespace == "CC")
# Generate and save separate heatmaps
generate_and_save_heatmap(mf_data, "Molecular Function", "MF")
generate_and_save_heatmap(bp_data, "Biological Process", "BP")
generate_and_save_heatmap(cc_data, "Cellular Component", "CC")
# Load required libraries
library(pheatmap)
library(reshape2)
library(dplyr)
library(gridExtra)
library(grid)
library(ggplot2)
# Load data
data <- read.csv("D:/Toolbox/Pfam_GO_3000_annotated.csv", stringsAsFactors = FALSE)
# Replace NA in q-values with 1
data$FDR..q.value.[is.na(data$FDR..q.value.)] <- 1
# Function to generate and save pheatmap
generate_and_save_heatmap <- function(sub_data, title_suffix, filename_suffix) {
if (nrow(sub_data) == 0) {
cat(paste("[!] No data found for", title_suffix, "\n"))
return()
}
df_wide <- dcast(sub_data, GO.Term.Description ~ sector, value.var = "FDR..q.value.")
df_wide[is.na(df_wide)] <- 1
mat <- as.matrix(df_wide[,-1])
rownames(mat) <- df_wide$GO.Term.Description
mat[mat > 0.05] <- 0.05
p <- pheatmap(mat,
cluster_rows = TRUE,
cluster_cols = FALSE,
color = colorRampPalette(c("red", "white"))(50),
breaks = seq(0, 0.06, length.out = 50),
border_color = "black",
fontsize_row = 10,
fontsize_col = 10,
main = paste("GO Term Enrichment -", title_suffix),
silent = TRUE)
# Save to file
png_filename <- paste0("D:/Toolbox/GO_Term_Enrichment_", filename_suffix, ".png")
png(png_filename, width = 1500, height = 500)
grid.draw(p$gtable)
dev.off()
cat(paste("[✓] Saved heatmap:", png_filename, "\n"))
}
# Split data
bp_data <- filter(data, Namespace == "BP")
mf_data <- filter(data, Namespace == "MF")
cc_data <- filter(data, Namespace == "CC")
# Generate and save separate heatmaps
generate_and_save_heatmap(mf_data, "Molecular Function", "MF")
generate_and_save_heatmap(bp_data, "Biological Process", "BP")
generate_and_save_heatmap(cc_data, "Cellular Component", "CC")
# Load required libraries
library(pheatmap)
library(reshape2)
library(dplyr)
library(gridExtra)
library(grid)
library(ggplot2)
# Load data
data <- read.csv("D:/Toolbox/Pfam_GO_3000_annotated.csv", stringsAsFactors = FALSE)
# Replace NA in q-values with 1
data$FDR..q.value.[is.na(data$FDR..q.value.)] <- 1
# Function to generate and save pheatmap
generate_and_save_heatmap <- function(sub_data, title_suffix, filename_suffix) {
if (nrow(sub_data) == 0) {
cat(paste("[!] No data found for", title_suffix, "\n"))
return()
}
df_wide <- dcast(sub_data, GO.Term.Description ~ sector, value.var = "FDR..q.value.")
df_wide[is.na(df_wide)] <- 1
mat <- as.matrix(df_wide[,-1])
rownames(mat) <- df_wide$GO.Term.Description
mat[mat > 0.05] <- 0.05
p <- pheatmap(mat,
cluster_rows = TRUE,
cluster_cols = FALSE,
color = colorRampPalette(c("red", "white"))(100),
breaks = seq(0, 0.1, length.out = 101),
border_color = "black",
fontsize_row = 10,
fontsize_col = 10,
main = paste("GO Term Enrichment -", title_suffix),
silent = TRUE)
# Save to file
png_filename <- paste0("D:/Toolbox/GO_Term_Enrichment_", filename_suffix, ".png")
png(png_filename, width = 1500, height = 500)
grid.draw(p$gtable)
dev.off()
cat(paste("[✓] Saved heatmap:", png_filename, "\n"))
}
# Split data
bp_data <- filter(data, Namespace == "BP")
mf_data <- filter(data, Namespace == "MF")
cc_data <- filter(data, Namespace == "CC")
# Generate and save separate heatmaps
generate_and_save_heatmap(mf_data, "Molecular Function", "MF")
generate_and_save_heatmap(bp_data, "Biological Process", "BP")
generate_and_save_heatmap(cc_data, "Cellular Component", "CC")
# Load required libraries
library(pheatmap)
library(reshape2)
library(dplyr)
library(gridExtra)
library(grid)
library(ggplot2)
# Load data
data <- read.csv("D:/Toolbox/Pfam_GO_3000_annotated.csv", stringsAsFactors = FALSE)
# Replace NA in q-values with 1
data$FDR..q.value.[is.na(data$FDR..q.value.)] <- 1
# Function to generate and save pheatmap
generate_and_save_heatmap <- function(sub_data, title_suffix, filename_suffix) {
if (nrow(sub_data) == 0) {
cat(paste("[!] No data found for", title_suffix, "\n"))
return()
}
df_wide <- dcast(sub_data, GO.Term.Description ~ sector, value.var = "FDR..q.value.")
df_wide[is.na(df_wide)] <- 1
mat <- as.matrix(df_wide[,-1])
rownames(mat) <- df_wide$GO.Term.Description
mat[mat > 0.05] <- 0.05
p <- pheatmap(mat,
cluster_rows = TRUE,
cluster_cols = FALSE,
color = colorRampPalette(c("white", "red"))(100),
breaks = seq(0, 0.05, length.out = 101),
border_color = "black",
fontsize_row = 10,
fontsize_col = 10,
main = paste("GO Term Enrichment -", title_suffix),
silent = TRUE)
# Save to file
png_filename <- paste0("D:/Toolbox/GO_Term_Enrichment_", filename_suffix, ".png")
png(png_filename, width = 1500, height = 500)
grid.draw(p$gtable)
dev.off()
cat(paste("[✓] Saved heatmap:", png_filename, "\n"))
}
# Split data
bp_data <- filter(data, Namespace == "BP")
mf_data <- filter(data, Namespace == "MF")
cc_data <- filter(data, Namespace == "CC")
# Generate and save separate heatmaps
generate_and_save_heatmap(mf_data, "Molecular Function", "MF")
generate_and_save_heatmap(bp_data, "Biological Process", "BP")
generate_and_save_heatmap(cc_data, "Cellular Component", "CC")
# Load required libraries
library(ggplot2)
library(reshape2)
# Read the CSV file
data <- read.csv("D:/Toolbox/Result2.csv", header = TRUE)
# Rename columns for consistency
colnames(data) <- c("Sector", "Mean_Conservation", "Mean_Correlation", "Negative_Correlation", "Positive_Correlation",
"Corrected_sectors", "Sectors_1", "Negative_correlation_1","Positive_correlation_1", "Corrected_sectors1")
# Select relevant columns
cor_data <- data[, c("Corrected_sectors1", "Negative_correlation_1","Positive_correlation_1")]
# Melt to long format
long_data <- melt(cor_data, id.vars = "Corrected_sectors1", variable.name = "Type", value.name = "Percentage")
# Remove NA values
long_data <- na.omit(long_data)
# Rename factor levels in 'Type' for clarity
long_data$Type <- factor(long_data$Type,
levels = c("Positive_correlation_1", "Negative_correlation_1"),
labels = c("Positive", "Negative"))
# Rename Sector column
colnames(long_data)[colnames(long_data) == "Sectors_1"] <- "Sector"
long_data$Sector <- as.factor(long_data$Sector)
# Load required libraries
library(ggplot2)
library(reshape2)
# Read the CSV file
data <- read.csv("D:/Toolbox/Result2.csv", header = TRUE)
# Rename columns for consistency
colnames(data) <- c("Sector", "Mean_Conservation", "Mean_Correlation", "Negative_Correlation", "Positive_Correlation",
"Corrected_sectors", "Sectors_1", "Negative_correlation_1","Positive_correlation_1", "Corrected_sectors1")
# Select relevant columns
cor_data <- data[, c("Corrected_sectors1", "Negative_correlation_1","Positive_correlation_1")]
# Melt to long format
long_data <- melt(cor_data, id.vars = "Corrected_sectors1", variable.name = "Type", value.name = "Percentage")
# Remove NA values
long_data <- na.omit(long_data)
# Rename factor levels in 'Type' for clarity
long_data$Type <- factor(long_data$Type,
levels = c("Positive_correlation_1", "Negative_correlation_1"),
labels = c("Positive", "Negative"))
# Rename Sector column
colnames(long_data)[colnames(long_data) == "Corrected_sectors1"] <- "Sector"
long_data$Sector <- as.factor(long_data$Sector)
# Save to PNG
png("D:/Toolbox/Result2_3000.png", width = 1600, height = 1000, res = 150)
# Plot
ggplot(long_data, aes(x = Sector, y = Percentage, fill = Type)) +
geom_bar(stat = "identity", position = "dodge", color = "gray60", linewidth = 0.4) +
scale_fill_manual(values = c("Positive" = "lightblue", "Negative" = "brown")) +
labs(title = "Percentage of Positive and Negative Correlations per Sector",
x = "Sector",
y = "Percentage (%)",
fill = "Correlation Type") +
theme_minimal(base_size = 13) +
theme(
panel.background = element_blank(),
plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(color = "black"),
axis.ticks = element_line(color = "black"),
axis.text.x = element_text(angle = 45, hjust = 1),
legend.background = element_blank(),
legend.key = element_blank()
)
dev.off()
# Load required libraries
library(ggplot2)
library(reshape2)
# Read the CSV file
data <- read.csv("D:/Toolbox/Result2.csv", header = TRUE)
# Rename columns for consistency
colnames(data) <- c("Sector", "Mean_Conservation", "Mean_Correlation", "Negative_Correlation", "Positive_Correlation",
"Corrected_sectors", "Sectors_1", "Negative_correlation_1","Positive_correlation_1", "Corrected_sectors1")
# Select relevant columns
cor_data <- data[, c("Corrected_sectors", "Negative_correlation_1","Positive_correlation_1")]
# Melt to long format
long_data <- melt(cor_data, id.vars = "Corrected_sectors", variable.name = "Type", value.name = "Percentage")
# Remove NA values
long_data <- na.omit(long_data)
# Rename factor levels in 'Type' for clarity
long_data$Type <- factor(long_data$Type,
levels = c("Positive_correlation_1", "Negative_correlation_1"),
labels = c("Positive", "Negative"))
# Rename Sector column
colnames(long_data)[colnames(long_data) == "Corrected_sectors"] <- "Sector"
long_data$Sector <- as.factor(long_data$Sector)
# Save to PNG
png("D:/Toolbox/Result2_1500.png", width = 1600, height = 1000, res = 150)
# Plot
ggplot(long_data, aes(x = Sector, y = Percentage, fill = Type)) +
geom_bar(stat = "identity", position = "dodge", color = "gray60", linewidth = 0.4) +
scale_fill_manual(values = c("Positive" = "lightblue", "Negative" = "brown")) +
labs(title = "Percentage of Positive and Negative Correlations per Sector",
x = "Sector",
y = "Percentage (%)",
fill = "Correlation Type") +
theme_minimal(base_size = 13) +
theme(
panel.background = element_blank(),
plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(color = "black"),
axis.ticks = element_line(color = "black"),
axis.text.x = element_text(angle = 45, hjust = 1),
legend.background = element_blank(),
legend.key = element_blank()
)
dev.off()
# Load required libraries
library(ggplot2)
library(reshape2)
# Read the CSV file
data <- read.csv("D:/Toolbox/Result2.csv", header = TRUE)
# Rename columns for consistency
colnames(data) <- c("Sector", "Mean_Conservation", "Mean_Correlation", "Negative_Correlation", "Positive_Correlation",
"Corrected_sectors", "Sectors_1", "Negative_correlation_1","Positive_correlation_1", "Corrected_sectors1")
# Select relevant columns
cor_data <- data[, c("Corrected_sectors", "Negative_correlation_1","Positive_correlation_1")]
# Melt to long format
long_data <- melt(cor_data, id.vars = "Corrected_sectors", variable.name = "Type", value.name = "Percentage")
# Remove NA values
long_data <- na.omit(long_data)
# Rename factor levels in 'Type' for clarity
long_data$Type <- factor(long_data$Type,
levels = c("Positive_correlation_1", "Negative_correlation_1"),
labels = c("Positive", "Negative"))
# Rename Sector column
colnames(long_data)[colnames(long_data) == "Corrected_sectors"] <- "Sector"
long_data$Sector <- as.factor(long_data$Sector)
# Save to PNG
png("D:/Toolbox/Result2_1500.png", width = 1600, height = 1000, res = 150)
# Plot
ggplot(long_data, aes(x = Sector, y = Percentage, fill = Type)) +
geom_bar(stat = "identity", position = "dodge", color = "gray60", linewidth = 0.4) +
scale_fill_manual(values = c("Positive" = "lightblue", "Negative" = "brown")) +
labs(title = "Percentage of Positive and Negative Correlations per Sector",
x = "Sector",
y = "Percentage (%)",
fill = "Correlation Type") +
theme_minimal(base_size = 13) +
theme(
panel.background = element_blank(),
plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(color = "black"),
axis.ticks = element_line(color = "black"),
axis.text.x = element_text(angle = 45, hjust = 1),
legend.background = element_blank(),
legend.key = element_blank()
)
dev.off()
# Load required libraries
library(ggplot2)
library(reshape2)
# Read the CSV file
data <- read.csv("D:/Toolbox/Result2.csv", header = TRUE)
# Rename columns for consistency
colnames(data) <- c("Sector", "Mean_Conservation", "Mean_Correlation", "Negative_Correlation", "Positive_Correlation",
"Corrected_sectors", "Sectors_1", "Negative_correlation_1","Positive_correlation_1", "Corrected_sectors1")
# Select relevant columns
cor_data <- data[, c("Corrected_sectors", "Negative_correlation","Positive_correlation")]
# Load required libraries
library(ggplot2)
library(reshape2)
# Read the CSV file
data <- read.csv("D:/Toolbox/Result2.csv", header = TRUE)
# Rename columns for consistency
colnames(data) <- c("Sector", "Mean_Conservation", "Mean_Correlation", "Negative_Correlation", "Positive_Correlation",
"Corrected_sectors", "Sectors_1", "Negative_correlation_1","Positive_correlation_1", "Corrected_sectors1")
# Select relevant columns
cor_data <- data[, c("Corrected_sectors", "Negative_Correlation","Positive_Correlation")]
# Melt to long format
long_data <- melt(cor_data, id.vars = "Corrected_sectors", variable.name = "Type", value.name = "Percentage")
# Remove NA values
long_data <- na.omit(long_data)
# Rename factor levels in 'Type' for clarity
long_data$Type <- factor(long_data$Type,
levels = c("Positive_correlation", "Negative_correlation"),
labels = c("Positive", "Negative"))
# Rename Sector column
colnames(long_data)[colnames(long_data) == "Corrected_sectors"] <- "Sector"
long_data$Sector <- as.factor(long_data$Sector)
# Save to PNG
png("D:/Toolbox/Result2_1500.png", width = 1600, height = 1000, res = 150)
# Plot
ggplot(long_data, aes(x = Sector, y = Percentage, fill = Type)) +
geom_bar(stat = "identity", position = "dodge", color = "gray60", linewidth = 0.4) +
scale_fill_manual(values = c("Positive" = "lightblue", "Negative" = "brown")) +
labs(title = "Percentage of Positive and Negative Correlations per Sector",
x = "Sector",
y = "Percentage (%)",
fill = "Correlation Type") +
theme_minimal(base_size = 13) +
theme(
panel.background = element_blank(),
plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(color = "black"),
axis.ticks = element_line(color = "black"),
axis.text.x = element_text(angle = 45, hjust = 1),
legend.background = element_blank(),
legend.key = element_blank()
)
dev.off()
# Load required libraries
library(ggplot2)
library(reshape2)
# Read the CSV file
data <- read.csv("D:/Toolbox/Result2.csv", header = TRUE)
# Rename columns for consistency
colnames(data) <- c("Sector", "Mean_Conservation", "Mean_Correlation", "Negative_Correlation", "Positive_Correlation",
"Corrected_sectors", "Sectors_1", "Negative_correlation_1","Positive_correlation_1", "Corrected_sectors1")
# Select relevant columns
cor_data <- data[, c("Corrected_sectors", "Negative_Correlation","Positive_Correlation")]
# Melt to long format
long_data <- melt(cor_data, id.vars = "Corrected_sectors", variable.name = "Type", value.name = "Percentage")
# Remove NA values
long_data <- na.omit(long_data)
# Rename factor levels in 'Type' for clarity
long_data$Type <- factor(long_data$Type,
levels = c("Positive_Correlation", "Negative_Correlation"),
labels = c("Positive", "Negative"))
# Rename Sector column
colnames(long_data)[colnames(long_data) == "Corrected_sectors"] <- "Sector"
long_data$Sector <- as.factor(long_data$Sector)
# Save to PNG
png("D:/Toolbox/Result2_1500.png", width = 1600, height = 1000, res = 150)
# Plot
ggplot(long_data, aes(x = Sector, y = Percentage, fill = Type)) +
geom_bar(stat = "identity", position = "dodge", color = "gray60", linewidth = 0.4) +
scale_fill_manual(values = c("Positive" = "lightblue", "Negative" = "brown")) +
labs(title = "Percentage of Positive and Negative Correlations per Sector",
x = "Sector",
y = "Percentage (%)",
fill = "Correlation Type") +
theme_minimal(base_size = 13) +
theme(
panel.background = element_blank(),
plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(color = "black"),
axis.ticks = element_line(color = "black"),
axis.text.x = element_text(angle = 45, hjust = 1),
legend.background = element_blank(),
legend.key = element_blank()
)
dev.off()
